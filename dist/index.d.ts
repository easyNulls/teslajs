// Generated by dts-bundle-generator v8.0.1

export type OrNullable<T> = null | undefined | T;
export type ProductsData = {
	energy_site_id: number; // 能源站点 ID
	resource_type: string; // 资源类型
	id: string; // ID
	asset_site_id: string; // 资产站点 ID
	solar_power: string; // 太阳能功率
	solar_type: string; // 太阳能类型
	sync_grid_alert_enabled: boolean; // 同步电网警报是否启用
	breaker_alert_enabled: boolean; // 断路器警报是否启用
	components: {
		battery: boolean; // 是否有电池组件
		solar: boolean; // 是否有太阳能组件
		solar_type: boolean; // 是否有太阳能类型组件
		grid: boolean; // 是否有电网组件
		load_meter: boolean; // 是否有负载仪表组件
		market_type: string; // 市场类型
	};
};
export type FeatureConfig = {
	signaling: {
		enabled: boolean;
		subscribe_connectivity: boolean;
	};
};
export type UserMe = {
	email: string;
	full_name: string;
	profile_image_url: string;
};
export type NotificationPreferencesParams = {
	device_type: string;
	app_version: string;
	device_token: string;
	platform: string;
	locale: string | "zh_Hans_CN";
};
/**
 * A "legacy" version of the data endpoint.('data' | 'latest_vehicle_data')
 */
export type VehicleDataNames = "vehicle_data" | "data" | "latest_vehicle_data";
export type VehicleStateNames = "charge_state" | "climate_state" | "drive_state" | "gui_settings" | "vehicle_config" | "vehicle_state";
/**
 *
 */
export type VehicleStateNames_Special = "vehicle_data" | "data" | "latest_vehicle_data" | "release_notes" | "mobile_enabled" | "nearby_charging_sites";
/**
 * 表示充电状态
 */
export type ChargingStates = string | "Complete" // 充电完成
 | "Charging" // 充电中
 | "Disconnected" // 断开连接
 | "Stopped"; // 停止充电
/**
 * 表示充电类型的原生值
 */
export type NativeTypes = "off_peak" | "user" | "time" | string;
/**
 *
 * off?: 表示气候保持模式处于关闭状态，车辆不会继续保持温度。
 * dog?: 表示气候保持模式处于“狗模式”，适用于在车内留下宠物时，保持适宜的温度。
 * camp?: 表示气候保持模式处于“露营模式”，适用于在车内睡觉或休息时，保持适宜的温度。
 */
export type ClimateKeeperMode = "off" | "dog" | "camp" | string;
/**
 * 换挡状态
 * 'P'（停车挡）、'R'（倒车挡）、'N'（空挡）、'D'（驾驶挡）和 'UNKNOWN'（未知）
 */
export type ShiftStates = "P" | "R" | "N" | "D" | "UNKNOWN" | OrNullable<string>;
export type VehicleStateValues = string | "driving" // 表示车辆正在行驶
 | "stopped" // 表示车辆已停止
 | "parked" // 表示车辆已停放
 | "charging" // 表示车辆正在充电
 | "supercharging" // 表示车辆正在进行超级充电
 | "idle" // 表示车辆处于空闲状态
 | "asleep" // 表示车辆处于休眠状态
 | "online" // 表示车辆在线
 | "offline" // 表示车辆离线
 | "locked" // 表示车辆已锁定
 | "unlocked" // 表示车辆已解锁
 | "open" // 表示车辆的门或窗户已打开
 | "closed" // 表示车辆的门或窗户已关闭
 | "charging_idle" // 表示车辆正在充电，但处于空闲状态
 | "preconditioning" // 表示车辆正在预热或预冷
 | "error" // 表示车辆出现故障
 | "maintenance"; // 表示车辆处于维护状态
/**
 * 表示快速充电器类型
 */
export type FastChargerTypes = string | "<invalid>" | "AC" // 交流充电
 | "DC" // 直流充电
 | "Other"; // 其他类型
/**
 * 表示预定充电模式
 */
export type ScheduledChargingModes = "Immediate" // 立即充电
 | "Depart" // 出发前充电
 | "Scheduled" // 预定充电
 | "Sff"; // 关闭预定充电
export interface TeslaDriveState {
	gps_as_of?: number; // GPS数据的时间戳
	heading?: number; // 方向角度（以度为单位）
	latitude?: number; // 纬度坐标
	longitude?: number; // 经度坐标
	native_latitude?: number; // 本地纬度坐标
	native_location_supported?: number; // 表示是否支持本地位置
	native_longitude?: number; // 本地经度坐标
	native_type?: NativeTypes; // 本地位置类型
	power?: number; // 功率信息
	shift_state?: ShiftStates; // 车辆换挡状态，或为 null
	speed?: number | null; // 车速，或为 null
	timestamp?: number; // 驾驶状态数据的时间戳
}
/**
 * 空调状态信息接口
 */
export interface TeslaClimateState {
	battery_heater?: boolean; // 电池加热器是否启用
	battery_heater_no_power?: boolean; // 电池加热器是否无电源
	climate_keeper_mode?: ClimateKeeperMode; // 空调保持模式
	defrost_mode?: number; // 前窗除霜模式（整数）
	driver_temp_setting?: number; // 驾驶员温度设定值
	fan_status?: number; // 风扇状态（整数）
	inside_temp?: number; // 内部温度
	is_auto_conditioning_on?: boolean; // 是否启用自动空调调节
	is_climate_on?: boolean; // 是否启用空调
	is_front_defroster_on?: boolean; // 是否启用前窗除霜
	is_preconditioning?: boolean; // 是否预条件加热/冷却
	is_rear_defroster_on?: boolean; // 是否启用后窗除霜
	left_temp_direction?: number; // 左侧温度调节方向（整数）
	max_avail_temp?: number; // 最大可用温度
	min_avail_temp?: number; // 最小可用温度
	outside_temp?: number; // 外部温度
	passenger_temp_setting?: number; // 乘客温度设定值
	remote_heater_control_enabled?: boolean; // 是否启用远程加热控制
	right_temp_direction?: number; // 右侧温度调节方向（整数）
	seat_heater_left?: number; // 左座位加热器等级（整数）
	seat_heater_right?: number; // 右座位加热器等级（整数）
	side_mirror_heaters?: boolean; // 是否启用外后视镜加热器
	timestamp?: number; // 状态信息的时间戳
	wiper_blade_heater?: boolean; // 雨刮器刀片加热器是否启用
}
/**
 * 表示深夜充电时间段
 */
export type OffPeakChargingTimes = {
	startHour: number; // 充电起始小时
	startMinute: number; // 充电起始分钟
	endHour: number; // 充电结束小时
	endMinute: number; // 充电结束分钟
};
/**
 * 充电状态信息接口
 */
export interface TeslaChargeState {
	battery_heater_on?: boolean; // 电池加热器是否启用
	battery_level?: number; // 电池电量百分比
	battery_range?: number; // 电池续航里程（单位：英里）
	charge_amps: number; // 充电电流（安培）
	charge_current_request?: number; // 请求充电电流
	charge_current_request_max?: number; // 最大请求充电电流
	charge_enable_request?: boolean; // 请求启用充电
	charge_energy_added?: number; // 充电过程中添加的能量
	charge_limit_soc?: number; // 充电限制电量百分比
	charge_limit_soc_max?: number; // 最大充电限制电量百分比
	charge_limit_soc_min?: number; // 最小充电限制电量百分比
	charge_limit_soc_std?: number; // 标准充电限制电量百分比
	charge_miles_added_ideal?: number; // 理想条件下的添加续航里程
	charge_miles_added_rated?: number; // 额定条件下的添加续航里程
	charge_port_cold_weather_mode: boolean; // 寒冷天气下的充电口模式是否已启用
	charge_port_color: string; // 充电口颜色
	charge_port_door_open?: boolean; // 充电口是否打开
	charge_port_latch: "Engaged" | string; // 充电口锁定状态
	charge_rate?: number; // 充电速率
	charge_to_max_range?: boolean; // 是否充电至最大续航里程
	charger_actual_current?: number; // 充电器实际电流
	charger_phases?: number; // 充电器阶段数
	charger_pilot_current?: number; // 充电器导引电流
	charger_power?: number; // 充电器功率
	charger_voltage?: number; // 充电器电压
	managed_charging_active?: boolean; // 是否启用管理充电
	managed_charging_start_time?: number | null; // 管理充电启动时间
	managed_charging_user_canceled?: boolean; // 用户是否取消了管理充电
	charging_state: ChargingStates; // 充电状态
	conn_charge_cable: "<invalid>" | string; // 连接的充电电缆
	est_battery_range: number; // 估计电池剩余里程（英里）
	fast_charger_brand: string; // 快速充电器品牌
	fast_charger_present: boolean; // 是否连接快速充电器
	fast_charger_type: FastChargerTypes; // 快速充电器类型
	ideal_battery_range: number; // 理论电池剩余里程（英里）
	max_range_charge_counter: number; // 最大充电次数
	minutes_to_full_charge: number; // 充满电需要的时间（分钟）
	not_enough_power_to_heat: any;
	off_peak_charging_enabled: boolean; // 是否启用低峰充电
	off_peak_charging_times: "all_week" | string | Array<OffPeakChargingTimes>; // 低峰充电时间
	off_peak_hours_end_time: number; // 低峰充电结束时间
	preconditioning_enabled: boolean; // 是否启用预条件化
	preconditioning_times: "all_week" | string; // 预条件化时间
	scheduled_charging_mode: ScheduledChargingModes; // 预定充电模式
	scheduled_charging_pending: boolean; // 预定充电是否待定
	scheduled_charging_start_time: any; // 预定充电开始时间
	scheduled_charging_start_time_app: number;
	scheduled_departure_time: number; // 预定出发时间
	scheduled_departure_time_minutes: number; // 预定出发时间（分钟）
	supercharger_session_trip_planner: boolean; // 是否在超级充电会话中使用行程规划
	time_to_full_charge: number; // 充满电所需时间
	timestamp: number; // 时间戳
	trip_charging: boolean; // 行程充电是否已启用
	usable_battery_level: number; // 可用电池电量百分比
	user_charge_enable_request: any;
}
/**
 * 图形用户界面设置接口
 */
export interface TeslaGuiSettings {
	gui_24_hour_time?: boolean; // 是否使用24小时制显示时间
	gui_charge_rate_units?: string; // 充电速率单位（例如：mi/hr）
	gui_distance_units?: string; // 距离单位（例如：mi/hr）
	gui_range_display?: string; // 续航显示模式（例如：Rated）
	gui_temperature_units?: string | "C" | "F"; // 温度单位（例如：F）
	show_range_units?: boolean; // 是否显示续航单位
	timestamp?: number; // 状态信息的时间戳
}
// 'NoSpace': '没有足够的存储空间',
// 'Recording': '正在录制',
// 'Parked': '停车状态',
// 'Standby': '待机状态',
// 'Unavailable': '不可用',
// 'Unknown': '未知状态',
export type DashcamStates = string | "NoSpace" | "Recording" | "Parked" | "Standby" | "Unavailable" | "Unknown";
/**
 * 上次自动泊车错误类型
 */
export type LastAutoparkErrors = string | "NoError" | "EmergencyBrakeApplied" | "UnsafeLocation" | "DriverCancelled" | "LowGear" | "ObstacleDetected" | "SteeringUnavailable" | "SystemFault" | "AutosteerDisabled" | "InsufficientData" | "Unknown";
/**
 * 车辆状态接口
 */
export interface TeslaVehicleState {
	api_version?: number; // API 版本号
	autopark_state_v2?: string; // 自动停车状态 V2
	autopark_style?: string; // 自动停车风格
	calendar_supported?: boolean; // 是否支持日历
	car_version?: string; // 车辆版本
	center_display_state?: number; // 中央显示屏状态
	dashcam_clip_save_available: boolean; // 是否可保存行车记录仪剪辑
	dashcam_state: DashcamStates; // 行车记录仪状态
	df?: number; // 左前车窗状态
	dr?: number; // 左后车窗状态
	fd_window?: number; // 右前车窗状态
	fp_window?: number; // 右后车窗状态
	ft?: number; // 后备箱状态
	homelink_device_count?: number; // Homelink 设备数量
	homelink_nearby?: boolean; // 是否附近有 Homelink
	is_user_present?: boolean; // 用户是否在车辆附近
	last_autopark_error?: LastAutoparkErrors; // 上次自动停车错误信息
	locked?: boolean; // 车辆是否上锁
	media_info: {
		audio_volume: number; // 音频音量
		audio_volume_increment: number; // 音频音量增量
		audio_volume_max: number; // 音频最大音量
		media_playback_status: "Playing" | string; // 媒体播放状态
		now_playing_album: string; // 当前播放的专辑
		now_playing_artist: string; // 当前播放的艺术家
		now_playing_duration: number; // 当前播放曲目的持续时间
		now_playing_elapsed: number; // 当前播放曲目已过去的时间
		now_playing_source: "AppleMusic" | string; // 当前播放源
		now_playing_station: string; // 当前播放的电台
		now_playing_title: string; // 当前播放曲目的标题
	};
	media_state?: {
		remote_control_enabled?: boolean; // 媒体遥控是否启用
	};
	notifications_supported?: boolean; // 是否支持通知
	odometer?: number; // 里程数
	parsed_calendar_supported?: boolean; // 解析的日历是否支持
	pf?: number; // 左前车窗状态
	pr?: number; // 左后车窗状态
	rp_window?: number; // 右后车窗状态
	rd_window?: number; // 右后车窗状态
	rt?: number; // 后备箱状态
	remote_start?: boolean; // 是否远程启动
	remote_start_enabled?: boolean; // 是否启用远程启动
	remote_start_supported?: boolean; // 是否支持远程启动
	santa_mode: number;
	sentry_mode?: boolean; // 哨兵模式是否启用
	sentry_mode_available?: boolean; // 是否可用哨兵模式
	smart_summon_available?: boolean; // 是否可用智能召唤
	service_mode: boolean; // 是否服务模式
	service_mode_plus: boolean; // 是否服务模式+
	software_update?: {
		download_perc?: number; // 下载百分比
		expected_duration_sec?: number; // 预期持续时间（秒）
		install_perc?: number; // 安装百分比
		status?: string; // 软件更新状态
		version?: string; // 软件版本
	};
	speed_limit_mode?: {
		active?: boolean; // 是否启用速度限制模式
		current_limit_mph?: number; // 当前速度限制（英里/小时）
		max_limit_mph?: number; // 最大速度限制（英里/小时）
		min_limit_mph?: number; // 最小速度限制（英里/小时）
		pin_code_set?: boolean; // 是否设置了 PIN 码
	};
	tpms_hard_warning_fl: boolean;
	tpms_hard_warning_fr: boolean;
	tpms_hard_warning_rl: boolean;
	tpms_hard_warning_rr: boolean;
	tpms_last_seen_pressure_time_fl: number; // 最近看到的前左胎压时间
	tpms_last_seen_pressure_time_fr: number; // 最近看到的前右胎压时间
	tpms_last_seen_pressure_time_rl: number; // 最近看到的后左胎压时间
	tpms_last_seen_pressure_time_rr: number; // 最近看到的后右胎压时间
	tpms_pressure_fl: number; // 前左胎压
	tpms_pressure_fr: number; // 前右胎压
	tpms_pressure_rl: number; // 后左胎压
	tpms_pressure_rr: number; // 后右胎压
	tpms_rcp_front_value: number; // 前胎压控制器值
	tpms_rcp_rear_value: number; // 后胎压控制器值
	tpms_soft_warning_fl: boolean;
	tpms_soft_warning_fr: boolean;
	tpms_soft_warning_rl: boolean;
	tpms_soft_warning_rr: boolean;
	webcam_available: boolean; // 摄像头是否可用
	summon_standby_mode_enabled?: boolean; // 是否启用召唤待命模式
	sun_roof_percent_open?: number; // 天窗开启百分比
	sun_roof_state?: string; // 天窗状态
	timestamp?: number; // 状态信息的时间戳
	valet_mode?: boolean; // 是否启用代客泊车模式
	valet_pin_needed?: boolean; // 是否需要代客泊车模式的 PIN 码
	vehicle_name?: OrNullable<string>; // 车辆名称（可为空）
	cached_data: string;
	last_seen: number; // 上次出现时间的数据
}
/**
 * 表示具有启用 VIN 的车辆的信息。
 */
export interface EnabledVin {
	vin: string; // 车辆识别号（VIN）
	next_appt_timestamp: OrNullable<string>; // 下一个预约的时间戳（如果已预约），或者为空（如果未预约）
	next_appt_end_timestamp: OrNullable<string>; // 下一个预约的结束时间戳（如果已预约），或者为空（如果未预约）
}
/**
 * 车辆的第三排座位类型。
 */
export type ThirdRowSeats = "none" | "rear-facing" | "forward-facing" | string;
/**
 * 车辆的扰流板类型。
 */
export type SpoilerTypes = "none" | "standard" | "performance" | string;
/*
  如果 rear_seat_type 的值为 0，可能表示后排没有座位，或者是一个空的座位区域。
  如果值为 1，可能表示后排是一个固定的座位，无法折叠。
  如果值为 2，可能表示后排是一个可折叠的座位，可以增加后备空间。
*/
export type RearSeatTypes = 0 | 1 | 2 | number;
export type AccessTypes = "owner" | "renter" | "service" | "guest" | string;
/**
 * 表示车厢操作类型
 */
export type CanActuateTrunks = "front" // 前车厢
 | "rear"; // 后车厢
/**
 * 表示特殊车辆类型
 */
export type CarSpecialTypes = string | "base" | "plaid" // Plaid 特殊车型
 | "plaid_plus" // Plaid+ 特殊车型
 | "ludicrous" // Ludicrous 特殊车型
 | "ludicrous_plus"; // Ludicrous+ 特殊车型
/**
 * 表示车辆类型
 */
export type CarTypes = string | "model3" | "modely" | "modelx" | "models" | "sedan" // 轿车
 | "suv" // SUV
 | "truck" // 卡车
 | "van" // 货车
 | "coupe" // 轿跑车
 | "convertible" // 敞篷车
 | "hatchback" // 掀背车
 | "wagon" // 旅行车
 | "minivan"; // 小型货车
/**
 * 表示充电接口类型
 */
export type ChargePortTypes = string | "GB" | "CCS" // CCS（Combo Charging System）充电接口
 | "J1772" // J1772（SAE J1772）充电接口
 | "Tesla"; // 特斯拉充电接口
/**
 * 表示车型标识
 */
export type TrimBadging = string | "standard" // 标准型号
 | "performance" // 性能型号
 | "long_range" // 长续航型号
 | "plaid" // Plaid型号
 | "plaid_plus"; // Plaid+型号
/**
 * 表示车轮类型
 */
export type WheelType = string | "PinwheelRefresh18" | "base" // 基础轮毂
 | "aero" // Aero轮毂
 | "sport" // 运动轮毂
 | "arty" // Arty轮毂
 | "turbine" // 涡轮轮毂
 | "induction"; // 引导轮毂
/**
 * 表示车辆的配置信息。
 */
export interface TeslaVehicleConfig {
	can_accept_navigation_requests?: boolean; // 车辆是否能够接受导航请求。
	can_actuate_trunks?: CanActuateTrunks; // 车辆是否能够操作行李箱。
	car_special_type?: CarSpecialTypes; // 车辆的特殊类型。
	car_type?: CarTypes; // 车辆的类型。
	charge_port_type?: ChargePortTypes; // 充电口的类型。
	default_charge_to_max?: boolean; // 是否将默认充电设为最大。
	driver_assist: string | "TeslaAP3";
	ece_restrictions?: boolean; // 是否应用欧洲经济区（EEA）限制。
	eu_vehicle?: boolean; // 是否为欧洲联盟车辆。
	exterior_color?: string; // 车辆外部的颜色。
	has_air_suspension?: boolean; // 车辆是否配备气动悬挂。
	has_ludicrous_mode?: boolean; // 车辆是否具有“疯狂模式”。
	motorized_charge_port?: boolean; // 充电口是否是电动的。
	plg?: boolean; // 车辆是否配备动力行李箱盖。
	rear_seat_heaters?: number; // 后排座椅加热器数量, 可能的取值为 0、1、2、3
	rear_seat_type?: RearSeatTypes; // 后排座椅类型。
	rhd?: boolean; // 车辆是否为右舵。
	roof_color?: string; // 车辆车顶的颜色。
	seat_type?: number; // 车辆座椅类型。
	spoiler_type?: SpoilerTypes; // 车辆尾翼类型。
	sun_roof_installed?: number; // 车辆的天窗类型。
	third_row_seats?: ThirdRowSeats; // 车辆第三排座椅类型。
	timestamp?: number; // 配置信息更新的时间戳。
	trim_badging?: TrimBadging; // 车辆的型号标识。
	use_range_badging?: boolean; // 是否使用续航标识。
	wheel_type?: WheelType; // 车辆的轮毂类型。
}
/**
 * 主要的车辆数据接口，包含了车辆的各种信息。
 */
export interface VehicleData {
	id?: number; // 车辆的唯一ID。
	user_id?: number; // 用户ID。
	vehicle_id?: number; // 车辆ID。
	vin?: string; // 车辆VIN号码。
	display_name?: string; // 车辆显示名称。
	color?: OrNullable<string>; // 车辆颜色，可以为null。
	access_type?: AccessTypes; // 用户访问类型。
	tokens?: Array<string>; // 车辆访问令牌数组。
	state?: VehicleStateValues; // 车辆状态。
	in_service?: boolean; // 是否在服务中。
	id_s?: string; // 车辆的字符串ID。
	calendar_enabled?: boolean; // 是否启用了日历功能。
	api_version?: number; // 车辆API版本。
	backseat_token?: OrNullable<string>; // 后座访问令牌，可以为null。
	backseat_token_updated_at?: OrNullable<string>; // 后座访问令牌的更新时间，可以为null。
	drive_state?: TeslaDriveState; // 车辆驾驶状态。
	climate_state?: TeslaClimateState; // 车辆气候状态。
	charge_state?: TeslaChargeState; // 车辆充电状态。
	gui_settings?: TeslaGuiSettings; // 车辆GUI设置。
	vehicle_state?: TeslaVehicleState; // 车辆状态。
	vehicle_config?: TeslaVehicleConfig; // 车辆配置信息。
}
/**
 /// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/alerts.md
 *
 * 表示汽车警报操作的名称
 */
export type AlertsNames = "honk_horn" // 鸣喇叭
 | "flash_lights"; // 闪灯
/**
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/charging.md
 *
 * 表示汽车充电操作的名称
 */
export type ChargingNames = "charge_port_door_open" // 开启充电口门
 | "charge_port_door_close" // 关闭充电口门
 | "charge_start" // 开始充电
 | "charge_stop" // 停止充电
 | "charge_standard" // 标准充电
 | "charge_max_range" // 最大续航充电
 | "set_charge_limit" // 设置充电限制
 | "set_charging_amps" // 设置充电电流
 | "set_scheduled_charging" // 设置定时充电
 | "set_scheduled_departure" // 设置定时离开充电
 | "set_scheduled_charging"; // 设置定时充电
/**
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/climate.md
 *
 * 表示汽车气候操作的名称
 */
export type ClimateNames = "auto_conditioning_start" // 开启自动空调
 | "auto_conditioning_stop" // 关闭自动空调
 | "set_temps" // 设置温度
 | "set_preconditioning_max" // 设置最大预热
 | "remote_seat_heater_request" // 远程座椅加热请求
 | "remote_seat_cooler_request" // 远程座椅冷却请求
 | "remote_steering_wheel_heater_request" // 远程方向盘加热请求
 | "set_bioweapon_mode" // 设置生化武器防护模式
 | "set_climate_keeper_mode" // 设置气候保持模式
 | "remote_auto_seat_climate_request" // 远程自动座椅气候请求
 | "set_cop_temp" // 设置CO温度
 | "set_cabin_overheat_protection"; // 设置车内过热保护
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/doors.md
export type Doors = "door_unlock" | "door_lock";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/homelink.md
export type Homelink = "trigger_homelink";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/media.md
export type Media = "media_toggle_playback" | "media_next_track" | "media_prev_track" | "media_next_fav" | "media_prev_fav" | "media_volume_up" | "media_volume_down" | "adjust_volume";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/misc.md
export type Misc = "take_drivenote" | "set_vehicle_name" | "screenshot" | "remote_boombox"; // Let the car fart remotely on version 2022.44.25.1 and above or use boombox v2 on supported vehicles.
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/remotestart.md
export type RemoteStart = "remote_start_drive";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/sentrymode.md
export type SentryMode = "set_sentry_mode";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/sharing.md
export type Sharing = "share";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/softwareupdate.md
export type SoftwareUpdates = "schedule_software_update" | "cancel_software_update";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/speedlimit.md
export type SpeedLimit = "speed_limit_set_limit" | "speed_limit_activate" | "speed_limit_deactivate" | "speed_limit_clear_pin";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/sunroof.md
export type Sunroof = "sun_roof_control";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/trunk.md
export type Trunk = "actuate_trunk";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/valet.md
export type ValetMode = "set_valet_mode" | "reset_valet_pin";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/wake.md
export type Wake = "wake_up";
/// https://github.com/timdorr/tesla-api/blob/master/docs/vehicle/commands/windows.md
export type Windows = "window_control";
export type CommandNames = AlertsNames | ChargingNames // 充电过程和相关功能
 | ClimateNames // 车辆的空调和温控系统
 | Doors // 车门控制
 | Homelink // 车辆与家中的门户设备（如车库门、门闸等）进行连接
 | Media // 车辆播放的媒体
 | Misc // 记下驾驶记录
 | RemoteStart // 远程启动，预热车辆
 | SentryMode // 安全功能，使用车辆的摄像头和传感器来提供额外的防护层，当车辆停放时保护车辆。
 | Sharing // 共享音乐、定位到车机
 | SoftwareUpdates // OTA设置
 | SpeedLimit // 设置的最大速度限制
 | Sunroof // 天窗
 | Trunk // 后备厢（车尾箱）的打开和关闭
 | ValetMode // 代客泊车
 | Wake // 唤醒机车
 | Windows; // 控制窗口。将同时通风或关闭所有窗户。
/**
 * 表示特斯拉系统中各种通知的设置。
 */
export interface NotificationSettings {
	alarm?: boolean; // 是否启用警报通知
	car_active?: boolean; // 是否启用车辆活动通知
	charge_cable_unlatched?: boolean; // 是否启用充电电缆已拔出通知
	charging_interrupted?: boolean; // 是否启用充电中断通知
	charge_pricing_information?: boolean; // 是否启用充电定价信息通知
	charging_arrears?: boolean; // 是否启用充电欠费通知
	charging_congestion_reminder?: boolean; // 是否启用充电拥堵提醒通知
	charging_congestion_soc_warning?: boolean; // 是否启用充电拥堵 SOC 警告通知
	charging_congestion_complete_warning?: boolean; // 是否启用充电拥堵完成警告通知
	charging_congestion_fee?: boolean; // 是否启用充电拥堵费用通知
	charging_coupon?: boolean; // 是否启用充电优惠券通知
	climate_ended?: boolean; // 是否启用气候控制结束通知
	climate_keeper_critical?: boolean; // 是否启用气候控制关键通知
	climate_keeper_ended_fault?: boolean; // 是否启用气候控制结束故障通知
	climate_keeper_ended_soc?: boolean; // 是否启用气候控制结束 SOC 通知
	climate_keeper_reminder?: boolean; // 是否启用气候控制提醒通知
	climate_keeper_warning?: boolean; // 是否启用气候控制警告通知
	climate_off_timeout?: boolean; // 是否启用气候关闭超时通知
	dog_mode_faulted?: boolean; // 是否启用狗模式故障通知
	factory_reset_initiated?: boolean; // 是否启用出厂复位初始化通知
	guest_share_revoked?: boolean; // 是否启用访客共享撤销通知
	high_usage_supercharger?: boolean; // 是否启用高使用率超级充电站通知
	inbox?: boolean; // 是否启用收件箱通知
	supercharging_disabled?: boolean; // 是否启用超级充电禁用通知
	bml_complete_order?: boolean; // 是否启用 BML 订单完成通知
	incentive_inspection?: boolean; // 是否启用奖励检查通知
	questionnaire?: boolean; // 是否启用问卷通知
	supercharging_entity_switch?: boolean; // 是否启用超级充电实体切换通知
	supercharging_miles_expiration?: boolean; // 是否启用超级充电里程到期通知
	supercharging_survey?: boolean; // 是否启用超级充电调查通知
	loot_box_boosted?: boolean; // 是否启用战利品箱增强通知
	lootbox_chargingmiles_expiration?: boolean; // 是否启用战利品箱充电里程到期通知
	lootbox_credit_bonus?: boolean; // 是否启用战利品箱积分奖励通知
	lootbox_credit_expiration?: boolean; // 是否启用战利品箱积分到期通知
	lootbox_promotion?: boolean; // 是否启用战利品箱促销通知
	lootbox_quarter_lottery?: boolean; // 是否启用战利品箱季度抽奖通知
	key_added?: boolean; // 是否启用钥匙添加通知
	key_removed?: boolean; // 是否启用钥匙移除通知
	low_soe?: boolean; // 是否启用电量低警告通知
	power_rationality_alert?: boolean; // 是否启用电源合理性警告通知
	please_move_car?: boolean; // 是否启用请移动车辆通知
	preconditioning_complete?: boolean; // 是否启用预条件完成通知
	outstanding_balance?: boolean; // 是否启用未结清余额通知
	refer_friend?: boolean; // 是否启用推荐朋友通知
	scheduled_update_failed_to_start?: boolean; // 是否启用计划更新启动失败通知
	secret_level?: boolean; // 是否启用秘密级别通知
	sentry_off_no_ap?: boolean; // 是否启用哨兵模式关闭（无AP）通知
	sentry_off_soc?: boolean; // 是否启用哨兵模式关闭（SOC）通知
	sentry_on_extended?: boolean; // 是否启用哨兵模式扩展通知
	sentry_panic?: boolean; // 是否启用哨兵模式恐慌通知
	service_in_part_hold?: boolean; // 是否启用部分维修保留通知
	service_in_part_hold_with_estimated_completion_time?: boolean; // 是否启用带预计完成时间的部分维修保留通知
	service_in_service?: boolean; // 是否启用服务中通知
	service_in_service_with_estimated_completion_time?: boolean; // 是否启用带预计完成时间的服务中通知
	service_installables_appointment?: boolean; // 是否启用可安装配件预约通知
	service_new_chat_message?: boolean; // 是否启用新聊天消息通知
	service_questions_prompt?: boolean; // 是否启用服务问题提示通知
	service_ready_for_pickup?: boolean; // 是否启用准备接车通知
	service_vehicle_self_test_request?: boolean; // 是否启用服务车辆自测请求通知
	service_range_analysis_complete?: boolean; // 是否启用服务范围分析完成通知
	service_range_analysis_incomplete?: boolean; // 是否启用服务范围分析未完成通知
	service_appointment_reminder?: boolean; // 是否启用服务预约提醒通知
	service_estimate_available?: boolean; // 是否启用服务估计可用通知
	service_estimate_available_reminder?: boolean; // 是否启用服务估计可用提醒通知
	service_rideshare_credits_to_be_provided?: boolean; // 是否启用待提供拼车积分通知
	service_rideshare_credits_available?: boolean; // 是否启用拼车积分可用通知
	service_loaner_vehicle_to_be_provided?: boolean; // 是否启用待提供代步车辆通知
	service_loaner_vehicle_accept_agreement?: boolean; // 是否启用代步车辆接受协议通知
	service_tracker_reminder?: boolean; // 是否启用服务追踪提醒通知
	service_complete?: boolean; // 是否启用服务完成通知
	service_survey?: boolean; // 是否启用服务调查通知
	service_manual_message?: boolean; // 是否启用服务手动消息通知
	speed_limit_proximity_triggered?: boolean; // 是否启用速度限制接近触发通知
	tesla_electric_new_site_added?: boolean; // 是否启用特斯拉电动新站点添加通知
	supercharing_coupon_redemption?: boolean; // 是否启用超级充电优惠券兑换通知
	tpms_alert?: boolean; // 是否启用胎压监测系统警报通知
	energy_support_chat_agent_ended_chat?: boolean; // 是否启用能源支持聊天代理结束聊天通知
	energy_support_chat_agent_joined_chat?: boolean; // 是否启用能源支持聊天代理加入聊天通知
	energy_support_chat_new_message?: boolean; // 是否启用能源支持聊天新消息通知
	energy_service_schedule_service?: boolean; // 是否启用能源服务安排服务通知
	energy_service_one_day_reminder?: boolean; // 是否启用能源服务一天提醒通知
	energy_service_seven_day_reminder?: boolean; // 是否启用能源服务七天提醒通知
	early_pickup_available?: boolean; // 是否启用提前取车通知
	update_available?: boolean; // 是否启用更新可用通知
	update_imminent?: boolean; // 是否启用即将更新通知
	urgent_can_alert?: boolean; // 是否启用紧急 CAN 警报通知
	vehicle_driving_in_valet_mode?: boolean; // 是否启用代客停车模式下行驶通知
	vehicle_twelve_volt_battery_replacement_alert?: boolean; // 是否启用车辆 12 伏电池更换警报通知
	vehicle_unsecure?: boolean; // 是否启用车辆不安全通知
	added_authorized_client?: boolean; // 是否启用已添加的授权客户通知
	battery_breaker_open?: boolean; // 是否启用电池断路器打开通知
	black_start_failure?: boolean; // 是否启用黑启动失败通知
	custom_energy_alert?: boolean; // 是否启用自定义能源警报通知
	grid_outage?: boolean; // 是否启用电网停电通知
	off_grid_approaching_low_soe?: boolean; // 是否启用脱网且接近低 SOC 通知
	removed_authorized_client?: boolean; // 是否启用已移除的授权客户通知
	scheduled_island_contactor_open?: boolean; // 是否启用计划的岛式接触器打开通知
	storm_mode_on?: boolean; // 是否启用风暴模式开启通知
	vpp_event_beginning_discharge?: boolean; // 是否启用 VPP 事件开始放电通知
	vpp_event_scheduled?: boolean; // 是否启用 VPP 事件预定通知
	enrollment_notification_rejected?: boolean; // 是否启用报名通知被拒绝通知
	enrollment_notification_ineligible?: boolean; // 是否启用报名通知不合格通知
	enrollment_notification_participating?: boolean; // 是否启用报名通知参与通知
	wait_for_jump_start?: boolean; // 是否启用等待启动通知
	wait_for_solar?: boolean; // 是否启用等待太阳能通知
	wait_for_user_low_soe?: boolean; // 是否启用等待用户低 SOC 通知
	wait_for_user_no_inverters_ready?: boolean; // 是否启用等待用户无逆变器就绪通知
	wait_for_user_retries_exhausted?: boolean; // 是否启用等待用户重试耗尽通知
	expired_payment?: boolean; // 是否启用付款过期通知
	internal_app_update_nag?: boolean; // 是否启用内部应用更新提醒通知
	suspicious_activity?: boolean; // 是否启用可疑活动通知
	rewrap_vault_keys?: boolean; // 是否启用重包装保险库密钥通知
	vehicle_added?: boolean; // 是否启用车辆添加通知
}
export type EnergySitesNames = string | "backup_time_remaining" | "live_status" | "site_status" | "site_info" | "programs" | "tariff_rate";
// ================================================   自定义  ============================================================
export type ObtainAccessTokenFn = () => Promise<AccessToken | null>;
export interface AccessToken {
	access_token?: OrNullable<string>;
	refresh_token?: OrNullable<string>;
	id_token?: OrNullable<string>;
	expires_in?: number | null;
	token_type?: OrNullable<string>;
}
export interface ApiConfig {
	redirectUrl: string;
	ossAuthorizeHost: string;
	teslamotorsHost: string;
	streamingHost: string;
	locale: OrNullable<string>;
	clientId: OrNullable<string>;
	userAgent: OrNullable<string>;
	appUserAgent: OrNullable<string>;
}
export interface ApiOptions {
	obtainAccessTokenFn: ObtainAccessTokenFn;
	config: ApiConfig;
}
export interface ICommondResult<T> {
	reason: string;
	result: T;
}
declare class AuthorizeApi {
	private _authorize_host;
	private _redirect_url;
	private _locale;
	private _client_id;
	constructor(props: {
		client_id: string;
		authorize_url: string;
		locale: OrNullable<string>;
		user_agent: OrNullable<string>;
		app_user_agent: OrNullable<string>;
		redirect_url: OrNullable<string>;
	});
	login(username: string, password: string, mfaDeviceName?: OrNullable<string>, mfaPassCode?: OrNullable<string>): Promise<AccessToken | null>;
	logout(accessToken: string): Promise<Record<string, any>>;
	refreshAccessToken(refreshToken: string): Promise<AccessToken>;
}
declare abstract class Api {
	protected obtainAccessToken: ObtainAccessTokenFn;
	protected config: ApiConfig | null;
	/**
	 * 构造函数，用于初始化 Api 实例。
	 * @param props - Api 配置选项。
	 */
	constructor(props: ApiOptions);
	/**
	 * 获取流式 URL。
	 * @returns 流式 URL。
	 */
	protected getStreamingHost: () => string;
	/**
	 * 获取 Teslamotors URL。
	 * @returns Teslamotors URL。
	 */
	protected getTeslamotorsHost: () => string;
	/**
	 * 设置获取访问令牌的函数。
	 * @param fn - 获取访问令牌的函数。
	 */
	protected accessTokenFn(fn: ObtainAccessTokenFn): void;
	/**
	 * 执行一个 API 函数并返回结果。
	 * @param fn - 要执行的 API 函数。
	 * @returns API 函数的结果。
	 */
	protected execute<T>(fn: (config: ApiConfig, accessToken: string) => Promise<T | null>): Promise<T | null>;
}
declare class UsersApi extends Api {
	constructor(props: ApiOptions);
	getUsersInformation(): Promise<UserMe | null>;
	getVaultProfile(): Promise<{
		vault: string;
	} | null>;
	getFeatureConfig(): Promise<FeatureConfig | null>;
	getServiceSchedulingData(): Promise<EnabledVin[] | null>;
	getNotificationPreferences(params: NotificationPreferencesParams): Promise<NotificationSettings | null>;
	getUsersKeys(kind: string, public_key: string, name: string, model: string): Promise<boolean | null>;
}
declare class ProductsApi extends Api {
	constructor(props: ApiOptions);
	getProducts(): Promise<(ProductsData | TeslaVehicleConfig)[] | null>;
}
declare class StreamsApi extends Api {
	private _ws_client;
	constructor(props: ApiOptions);
	open(): Promise<void>;
	buildConnectMessage: (userId: string, vehicleId: string, token?: OrNullable<string>) => Promise<void>;
}
declare class VehiclesApi extends Api {
	constructor(props: ApiOptions);
	getVehiclesList(): Promise<VehicleData[] | null>;
	getVehicles(id: number): Promise<VehicleData[] | null>;
}
declare class VehicleDataApi extends Api {
	constructor(props: ApiOptions);
	getVehicleData(id: number, dataName: VehicleDataNames, params: Record<string, any>): Promise<VehicleData | null>;
}
declare class AlertsApi extends Api {
	constructor(props: ApiOptions);
	/**
	 * 点击指定ID的喇叭按钮。
	 *
	 * @param {number} id - 要为之鸣笛的项的ID。
	 * @return {Promise<ICommondResult<boolean>>} 一个 Promise，它解析为喇叭操作的结果。
	 */
	honkHorn(id: number): Promise<ICommondResult<boolean> | null>;
	/**
	 * 执行一个命令来闪烁特定ID的灯光。
	 *
	 * @param {number} id - 要闪烁的灯光的ID。
	 * @return {Promise<ICommondResult<boolean>>} 一个解析为命令结果的Promise。
	 */
	flashLights(id: number): Promise<ICommondResult<boolean> | null>;
}
declare class DoorsApi extends Api {
	constructor(props: ApiOptions);
	doorLock(id: number): Promise<ICommondResult<boolean> | null>;
	doorUnlock(id: number): Promise<ICommondResult<boolean> | null>;
}
declare class HomelinkApi extends Api {
	constructor(props: ApiOptions);
	homelink(id: number, latitude: number, longitude: number): Promise<ICommondResult<boolean> | null>;
}
declare class MediaApi extends Api {
	constructor(props: ApiOptions);
	mediaTogglePlayback(id: number): Promise<ICommondResult<boolean> | null>;
	mediaNextTrack(id: number): Promise<ICommondResult<boolean> | null>;
	mediaPrevTrack(id: number): Promise<ICommondResult<boolean> | null>;
	mediaNextFav(id: number): Promise<ICommondResult<boolean> | null>;
	mediaPrevFav(id: number): Promise<ICommondResult<boolean> | null>;
	mediaVolumeUp(id: number): Promise<ICommondResult<boolean> | null>;
	mediaVolumeDown(id: number): Promise<ICommondResult<boolean> | null>;
	adjustVolume(userId: string, id: number, volume: number): Promise<ICommondResult<boolean> | null>;
}
declare class RemoteControlApi extends Api {
	constructor(props: ApiOptions);
	remoteStartDrive(id: number): Promise<ICommondResult<boolean> | null>;
}
declare class VehicleStateApi extends Api {
	constructor(props: ApiOptions);
	getState<T>(id: string | number, stateName: VehicleStateNames): Promise<T | null>;
}
export interface Fetch {
	request<T = any, R = Response<T>, D = any>(config: RequestConfig<D>): Promise<R>;
	get<T = any, R = Response<T>, D = any>(url: string, config?: RequestConfig<D>): Promise<R>;
	post<T = any, R = Response<T>, D = any>(url: string, data?: D, config?: RequestConfig<D>): Promise<R>;
}
export interface Response<T = any> {
	data: T;
	status: number;
	statusText: string;
	headers?: any;
	config: RequestConfig;
}
export interface RequestConfig<D = any> {
	url?: string;
	method?: string | "GET" | "POST" | "DELETE" | "PUT" | "PATCH" | "HEAD";
	baseURL?: string;
	headers?: any;
	params?: any;
	data?: D;
	timeout?: number;
	withCredentials?: boolean;
	maxRedirects?: number;
	responseType?: "arraybuffer" | "blob" | "document" | "json" | "text" | "stream";
	responseEncoding?: Encoding | string;
	httpAgent?: any;
	httpsAgent?: any;
}
export type Encoding = "ascii" | "ASCII" | "ansi" | "ANSI" | "binary" | "BINARY" | "base64" | "BASE64" | "base64url" | "BASE64URL" | "hex" | "HEX" | "latin1" | "LATIN1" | "ucs-2" | "UCS-2" | "ucs2" | "UCS2" | "utf-8" | "UTF-8" | "utf8" | "UTF8" | "utf16le" | "UTF16LE";
export declare class BaseFetch {
	private static _instance;
	private _fetch;
	private constructor();
	static instance(): BaseFetch;
	fetch(fetch: Fetch): BaseFetch;
	getFetch(): Fetch;
}
export interface Logger {
	d(level: number, message: string): void;
	e(level: number, message: string): void;
	w(level: number, message: string): void;
	i(level: number, message: string): void;
}
export declare class ConsoleLogger implements Logger {
	constructor();
	d(level: number, message: string): void;
	e(level: number, message: string): void;
	w(level: number, message: string): void;
	i(level: number, message: string): void;
}
export declare class NoLogger implements Logger {
	constructor();
	d(_level: number, _message: string): void;
	e(_level: number, _message: string): void;
	w(_level: number, _message: string): void;
	i(_level: number, _message: string): void;
}
export declare class Logwatch {
	private static _instance;
	private _logger;
	private constructor();
	static instance(): Logwatch;
	logger(logger: Logger): this;
	getLogger(): Logger;
}
export interface TokenDataSource {
	findLastAccessToken(userId: string): Promise<AccessToken | null>;
	toAccessToken(userId: string, token: AccessToken): void;
	clean(): void;
	findAll(): Promise<Record<string, AccessToken>>;
}
export declare class InMemoryTokenManager implements TokenDataSource {
	private static _accessTokens;
	findAll(): Promise<Record<string, AccessToken>>;
	accessToken(userId: string): Promise<AccessToken | null>;
	findLastAccessToken(userId: string): Promise<AccessToken | null>;
	toAccessToken(userId: string, token: AccessToken): void;
	clean(): void;
}
/**
 * Tesla API 合集
 * authorize: Tesla账户认证
 * vehicles： 车辆信息.
 *
 */
export declare class TeslaAPI {
	private _config;
	private _dataSource;
	constructor();
	/**
	 * 初始化默认环境变量参数.
	 *
	 * @returns
	 */
	toDefault(): this;
	fetch(fetch: Fetch): this;
	datasource(datasource: TokenDataSource): this;
	logger(logger: Logger): this;
	userTeslaAPIs: (userId: string) => {
		vehicles: VehiclesApi;
		users: UsersApi;
		products: ProductsApi;
		streams: StreamsApi;
		vehicleState: VehicleStateApi;
		vehicleData: VehicleDataApi;
		vehicleCommonds_Alerts: AlertsApi;
		vehicleCommonds_Doors: DoorsApi;
		vehicleCommonds_Homelink: HomelinkApi;
		vehicleCommonds_Media: MediaApi;
		vehicleCommonds_RemoteControl: RemoteControlApi;
	};
	/**
	 *  创建并返回 AuthorizeApi 实例
	 * @returns
	 */
	authorize(): AuthorizeApi;
	/**
	 * 登录,
	 * 注:该函数需要rest API client支持携带cookie
	 * 特斯拉在oauth鉴权后每次在cookie中携带 bm_sv\ak_bmsc\bm_sz\tesla-auth.sid 鉴权字段
	 * 当检测到这些字段不存在，oauth会一直重定向到登录页面
	 *
	 * @param username - 登录 email/手机号码.
	 * @param password - 登录密码.
	 * @param mfaDeviceName  - MFA 设备名称.
	 * @param mfaPassCode  - MFA 动态验证码.
	 * @returns 登录结果
	 */
	login: (username: string, password: string, mfaDeviceName?: OrNullable<string>, mfaPassCode?: OrNullable<string>) => Promise<AccessToken | null>;
	private checkTeslamotorsHost;
	private options;
	/**
	 * vehicles: 通过调用 createApiInstance(VehiclesApi, this.options(userId)) 来创建并返回一个 VehiclesApi 实例，用于处理与车辆信息相关的操作。
	 * @returns
	 */
	vehicles: (userId: string) => VehiclesApi;
	/**
	 * users: 通过调用 createApiInstance(UsersApi, this.options(userId)) 来创建并返回一个 UsersApi 实例，用于处理与用户信息相关的操作。
	 * @returns
	 */
	users: (userId: string) => UsersApi;
	/**
	 * streams: 通过调用 createApiInstance(StreamsApi, this.options(userId)) 来创建并返回一个 StreamsApi 实例，用于处理与数据流相关的操作。
	 * @returns
	 */
	streams: (userId: string) => StreamsApi;
	/**
	 * vehicleState: 通过调用 createApiInstance(VehicleStateApi, this.options(userId)) 来创建并返回一个 VehicleStateApi 实例，用于处理与车辆状态相关的操作。
	 * @deprecated
	 * @returns  目前返回可能为404
	 */
	vehicleState: (userId: string) => VehicleStateApi;
	vehicleData: (userId: string) => VehicleDataApi;
	vehicleCommonds_Alerts: (userId: string) => AlertsApi;
	vehicleCommonds_Doors: (userId: string) => DoorsApi;
	vehicleCommonds_Homelink: (userId: string) => HomelinkApi;
	vehicleCommonds_RemoteControl: (userId: string) => RemoteControlApi;
	vehicleCommonds_Media: (userId: string) => MediaApi;
	/**
	 * products: 通过调用 createApiInstance(ProductsApi, this.options(userId)) 来创建并返回一个 ProductsApi 实例，用于处理与产品信息相关的操作。
	 */
	products: (userId: string) => ProductsApi;
	locale(locale: string | "zh_CN" | "en_US"): this;
	authorizeHost(authorizeUrl: string): this;
	teslamotorsHost(url: string): this;
	streamingHost(url: string): this;
	clientId(clientId: string): this;
	static Builder(): TeslaAPI;
	/**
	 *  通过 options 创建不同类型的 API 实例
	 * @param apiClass 构造函数，用于创建指定类型的 API 实例。
	 * @param confg 这是一个包含 obtainAccessTokenFn 和 config 的对象，用于为 API 实例提供配置和获取 AccessToken 函数。
	 * @returns
	 */
	private createApiInstance;
}
export declare const getEnergySitesUri: (host: string, name: EnergySitesNames) => (siteId: string) => string;
export declare const getStateUri_Special: (id: string | number, stateName: VehicleStateNames_Special) => string;
export declare const getVehicleDataUri: (id: number, dataName: VehicleDataNames) => string;
/**
 * 返回车辆特定状态命令的URI。
 *
 * @param {string | number} id - 车辆的ID。
 * @param {VehicleStateNames} stateName - 状态命令的名称。
 * @return {string} 指定状态命令的URI。
 */
export declare const getStateUri: (id: string | number, stateName: VehicleStateNames) => string;
/**
 * 具体文档可以参考: https://tesla-api.timdorr.com/api-basics/authentication.
 *
 * @param {string} username - 用户手机号码或者邮箱地址.
 * @param {string} password - 用户注册密码.
 * @param {string} scope    - oauth scope范围
 * @param {string} mfaDeviceName  - MFA设备名称.
 * @param {string} mfaPassCode  - MFA 验证码.
 * @param baseUrl
 * @param clientId
 * @param locale
 * @returns
 */
export declare const login: (baseUrl: string, redirect_uri: string, clientId: string, locale: string, scope?: string) => (username: string, password: string, mfaDeviceName?: OrNullable<string>, mfaPassCode?: OrNullable<string>) => Promise<AccessToken>;
/**
 * Logout and invalidate the current auth token
 * @param {string} accessToken - Tesla provided OAuth token
 */
export declare const logout: (baseUrl: string, accessToken: string) => Promise<Record<string, any>>;
/**
 * 刷新TOKEN.
 *
 * @param refresh_token
 * @param scope
 * @param baseUrl
 * @returns
 */
export declare const refreshAccessToken: (baseUrl: string) => (refresh_token: string, scope?: string) => Promise<AccessToken>;
export declare const getUsersInformation: (baseUrl: string) => (accessToken: string) => () => Promise<UserMe | null>;
export declare const getVaultProfile: (baseUrl: string) => (accessToken: string) => () => Promise<{
	vault: string;
} | null>;
export declare const getFeatureConfig: (baseUrl: string) => (accessToken: string) => () => Promise<FeatureConfig | null>;
export declare const getUsersKeys: (baseUrl: string) => (accessToken: string) => (kind: string, public_key: string, name: string, model: string) => Promise<boolean | null>;
export declare const getNotificationPreferences: (baseUrl: string) => (accessToken: string) => (params: NotificationPreferencesParams) => Promise<NotificationSettings | null>;
export declare const getServiceSchedulingData: (baseUrl: string) => (accessToken: string) => () => Promise<EnabledVin[] | null>;
export declare const getProducts: (baseUrl: string) => (accessToken: string) => () => Promise<(ProductsData | TeslaVehicleConfig)[] | null>;
/**
 *
 */
export declare const getEnergySites: <T>(baseUrl: string, name: EnergySitesNames) => (accessToken: string) => (siteId: string, params: Record<string, any>) => Promise<NonNullable<T> | null>;
export declare const getVehiclesList: (baseUrl: string) => (accessToken: string) => () => Promise<VehicleData[] | null>;
/**
 *
 * @param id - The id of the car. (Not the vehicle_id!).
 * @param baseUrl
 */
export declare const getVehicles: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<VehicleData[] | null>;
/**
 * "honk_horn" 是指按下车辆喇叭，发出声音来产生警示或传达信息的功能。特斯拉车辆也具备这个功能。
 * 特斯拉车辆的 "honk_horn" 功能可以用于以下情况：
 * 警示： 当驾驶员需要提醒其他交通参与者注意时，例如在紧急情况下需要停车或避让。
 * 传达信息： 驾驶员可能使用喇叭来向其他驾驶员、行人或其他人传达信息，例如在需要提醒前方车辆行驶不当或不安全的情况下。
 * 报警： 在有危险情况或紧急情况下，驾驶员可以使用喇叭来引起其他交通参与者的注意。
 * 特斯拉车辆的 "honk_horn" 功能通常可以通过车辆的控制面板、车辆的遥控应用程序或车辆钥匙等方式来触发。在使用这个功能时，务必注意周围的环境和其他交通参与者，并遵循道路交通规则和安全法规。
 * @param id 非vehicle id
 * @param baseUrl
 */
export declare const honkHorn: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
/**
 * "Flash Lights" 是指在特定情况下，特斯拉车辆的前后灯光会快速闪烁的功能。这通常用于吸引注意、传递信息或警示其他车辆、行人或驾驶员。
 *  特斯拉车辆的 "Flash Lights" 功能可能在以下情况下使用：
 *  警示： 当驾驶员需要提醒其他交通参与者注意时，例如在紧急情况下需要停车或避让。
 *  通信： 有时驾驶员可能使用 "Flash Lights" 来与其他车辆或行人进行简单的交流，例如示意其他车辆先行通过或表示感谢。
 *  报警： 在一些情况下，驾驶员可能使用 "Flash Lights" 来引起其他驾驶员的注意，例如当他们可能未注意到停在路边的特斯拉车辆时。
 *  请注意，不同的车型和软件版本可能具有不同的 "Flash Lights" 功能和操作方式。在使用这个功能时，请始终遵循特斯拉的操作指南，并在适当的情况下使用。.
 * @param baseUrl
 * @returns
 */
export declare const flashLights: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const chargePortDoorClose: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const chargePortDoorOpen: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const chargeStart: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const chargeStop: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const doorLock: (host: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const doorUnlock: (host: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const homelink: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaTogglePlayback: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaNextTrack: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaPrevTrack: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaNextFav: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaPrevFav: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaVolumeUp: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const mediaVolumeDown: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
/**
 *
 * @param volume 0 - 11
 * @returns
 */
export declare const adjustVolume: (baseUrl: string) => (accessToken: string) => (id: number, volume: number) => Promise<ICommondResult<boolean> | null>;
export declare const remoteStartDrive: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const sunRoofControl: (baseUrl: string, state: string | "vent" | "close") => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const wakeUp: (baseUrl: string) => (accessToken: string) => (id: number) => Promise<ICommondResult<boolean> | null>;
export declare const getRequestData: (url: string) => (accessToken: string) => <T>() => Promise<NonNullable<T> | null>;
/**
 *
 * @param baseUrl
 * @returns
 */
export declare const getDataRequest: (baseUrl: string) => (accessToken: string) => (id: number, dataName: VehicleDataNames, params: Record<string, any>) => Promise<VehicleData | null>;
/**
 * 根据应用版本、平台和平台版本生成 Tesla 应用的版本信息。
 *
 * @param appVersion - 应用版本号。
 * @param platform - 平台名称。
 * @param platformVer - 平台版本号。
 * @returns 格式化后的 Tesla 应用版本信息字符串。
 */
export declare const TeslaAppVersion: (appVersion: string, patch: string, platform: string, platformVer: string) => string;
/**
 * 获取用于 Tesla 应用的请求头信息。
 *
 * @returns 包含 Tesla 应用请求头的对象。
 */
export declare const getTeslaAppHeaders: () => {
	"user-agent": string;
	"x-tesla-user-agent": string;
};
/**
 * 生成带有 Bearer 认证头的令牌对象。
 *
 * @param accessToken - 访问令牌字符串。
 * @param typeName - 认证类型，默认为 'Bearer'。
 * @returns 包含认证头的对象。
 */
export declare const generateBearerToken: (accessToken: string, typeName?: string) => Record<string, string>;
export declare const getCommandUri: (id: string | number, commandName: CommandNames) => string;
/**
 * 定义一个 postCommond 函数，用于发送 POST 请求并执行命令。
 *
 * @param baseUrl - 请求的基础 URL。
 * @param query - 可选，查询参数的对象。
 * @returns 接收访问令牌并返回一个函数，该函数用于执行命令。
 *
 */
export declare const postCommond: <T>(baseUrl: string, body?: Record<string, any>) => (accessToken: string) => (id: number, commandName: CommandNames) => Promise<T | null>;
export declare const randomString: (length: number) => string;
export declare const extractHidden: (body: string) => Record<string, string>;

export {};
